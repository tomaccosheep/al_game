from inventory import Inventory

class Coord():
    def __init__(self, in_coord, item=None):
        # Every set of coordinates has 3 points on the z-axis to place
        # items
        # {{
        self.coord = in_coord
        self.z0 = item
        self.z1 = None
        self.z2 = None
        # }}

    def __str__(self):
        return str(self.coord)

    def fall():
        # Stuff falls down when there's nothing below it
        # {{
        if z0 == None:
            if z1 != None:
                z0 = z1
                z1 = None
        if z1 == None:
            if z2 != None:
                z1 = z1
                z2 = None
        # }}

    def place(item_in):
        # Place something on top of the lowest level of coordinates
        # available.
        # {{
        if z0 != None:
            if z1 != None:
                if z2 != None:
                    print("This space is occupied")
                else:
                    z2 = item_in
            else:
                z1 = item_in
        else:
            z0 = item_in

class Room():
    # This creates a room with basic conditions, and it also gives the room map_coord and room_coord
    # Room_coord is zoomed in relative to map_coord at a scale of 3 to 1
    # {{
    def __init__(self, name, description, doors, characters, coordinates):
        self.name = name
        self.description = description
        self.doors = doors
        self.characters = characters
        self.inventory = Inventory(name)
        self.map_coord = coordinates
        self.room_coord = []
        # First this runs through all coordinates to get the
        # smallest x coordinate and the smallest y coordinate.
        # Then it creates a list of tuples that are the coordinates
        # for the room. All x and y coordinates are shifted based on the
        # smallest x and the smallest y, so that the top left corner is
        # (0,0)
        # {{
        x_smallest = self.map_coord[0][0]
        y_smallest = self.map_coord[0][1]
        for i in coordinates:
            if i[0] < x_smallest:
                x_smallest = i[0]
            if i[1] < y_smallest:
                y_smallest = i[1]
        for i in coordinates:
            x = (i[0] - x_smallest) * 3
            y = (i[1] - y_smallest) * 3
            for j in [ 0, 1, 2]:
                for k in [ 0, 1, 2]:
                    self.room_coord.append((x + j, y + k))
        # }}
        # Empty list of items in the room where tuple coordinates
        # are keys
        self.items_in_room = {}
    # }}

    def __str__(self):
        return self.name

    def __repr__(self):
        return self.name

    def add_item(self, item):
        self.inventory.put_in_quiet(item)

    def update_characters(self, characters):
        self.characters = list(characters)

    def remove_item(self, item):
        self.inventory.poplar(item)

    def check_name_in_inventory(self, item):
        self.inventory.check_name_in_inventory(item)

    def look(self):
        print(self.description)
        for character in self.characters:
            print("{} is in the room".format(character))
        for item in self.inventory.bag_of_holding:
            print("{} is in the room".format(item.description))
        for door in self.doors:
            print("You can exit through {}".format(door))

class Door():
    def __init__(self, name, description, room1, room2, is_locked):
        self.name = name
        self.description = description
        self.front = room1
        self.back = room2
        self.is_locked = is_locked

    def __str__(self):
        return self.name

    def __repr__(self):
        return self.name

    def look(self):
        print(self.name + '\n' + self.description)

    def unlock(self, key):
        if key.name == self.name:
            self.is_locked = False
        else:
            print('You couldn\'t unlock the door')
            
